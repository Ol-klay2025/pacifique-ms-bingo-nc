/**
 * Script pour ajouter un organisateur √† MS BINGO
 */

const sqlite3 = require('sqlite3').verbose();
const crypto = require('crypto');
const fs = require('fs');
const path = require('path');

// Chemin de la base de donn√©es
const dbPath = path.join(__dirname, 'msbingo.db');

// V√©rifier si la base de donn√©es existe
if (!fs.existsSync(dbPath)) {
  console.error(`‚ùå Base de donn√©es introuvable: ${dbPath}`);
  process.exit(1);
}

/**
 * Hache un mot de passe avec un sel al√©atoire
 * @param {string} password Mot de passe √† hacher
 * @returns {Promise<string>} Cha√Æne contenant le hachage et le sel
 */
async function hashPassword(password) {
  return new Promise((resolve, reject) => {
    try {
      const salt = crypto.randomBytes(16).toString('hex');
      const hash = crypto.scryptSync(password, salt, 64).toString('hex');
      resolve(`${hash}.${salt}`);
    } catch (error) {
      reject(error);
    }
  });
}

async function main() {
  // Connexion √† la base de donn√©es
  const db = new sqlite3.Database(dbPath, async (err) => {
    if (err) {
      console.error(`‚ùå Erreur de connexion √† la base de donn√©es: ${err.message}`);
      process.exit(1);
    }
    
    try {
      console.log('üîç V√©rification de la structure de la base de donn√©es...');
      
      // V√©rifier si la table users existe
      db.get("SELECT name FROM sqlite_master WHERE type='table' AND name='users'", async (err, table) => {
        if (err) {
          console.error(`‚ùå Erreur lors de la v√©rification des tables: ${err.message}`);
          db.close();
          process.exit(1);
        }
        
        if (!table) {
          console.log('‚ö†Ô∏è La table users n\'existe pas, cr√©ation...');
          
          // Cr√©er la table users
          db.run(`CREATE TABLE users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            username TEXT UNIQUE NOT NULL,
            password TEXT NOT NULL,
            email TEXT,
            balance INTEGER DEFAULT 1000,
            isAdmin INTEGER DEFAULT 0,
            isOrganizer INTEGER DEFAULT 0,
            created TEXT,
            lastLogin TEXT
          )`, async (err) => {
            if (err) {
              console.error(`‚ùå Erreur lors de la cr√©ation de la table users: ${err.message}`);
              db.close();
              process.exit(1);
            }
            
            console.log('‚úÖ Table users cr√©√©e avec succ√®s');
            await addOrganizer(db);
          });
        } else {
          console.log('‚úÖ Table users trouv√©e');
          await addOrganizer(db);
        }
      });
    } catch (error) {
      console.error(`‚ùå Erreur: ${error.message}`);
      db.close();
      process.exit(1);
    }
  });
}

async function addOrganizer(db) {
  // V√©rifier si l'organisateur existe d√©j√†
  db.get("SELECT * FROM users WHERE username = 'organisateur'", async (err, user) => {
    if (err) {
      console.error(`‚ùå Erreur lors de la v√©rification de l'utilisateur organisateur: ${err.message}`);
      db.close();
      process.exit(1);
    }
    
    if (user) {
      console.log('üîÑ L\'utilisateur organisateur existe d√©j√†, mise √† jour des privil√®ges...');
      
      // Mettre √† jour les privil√®ges
      db.run("UPDATE users SET isOrganizer = 1 WHERE username = 'organisateur'", (err) => {
        if (err) {
          console.error(`‚ùå Erreur lors de la mise √† jour des privil√®ges: ${err.message}`);
        } else {
          console.log('‚úÖ Privil√®ges mis √† jour avec succ√®s');
        }
        
        // R√©initialiser le mot de passe
        resetOrganizerPassword(db);
      });
    } else {
      console.log('‚ûï Cr√©ation d\'un nouvel utilisateur organisateur...');
      
      // Hacher le mot de passe
      const hashedPassword = await hashPassword('org-password-2025');
      
      // Ins√©rer le nouvel utilisateur
      db.run(
        "INSERT INTO users (username, password, email, balance, isAdmin, isOrganizer, created) VALUES (?, ?, ?, ?, ?, ?, ?)",
        ['organisateur', hashedPassword, 'org@msbingo.com', 1000, 0, 1, new Date().toISOString()],
        (err) => {
          if (err) {
            console.error(`‚ùå Erreur lors de la cr√©ation de l'utilisateur organisateur: ${err.message}`);
          } else {
            console.log('‚úÖ Utilisateur organisateur cr√©√© avec succ√®s');
          }
          
          db.close();
          process.exit(0);
        }
      );
    }
  });
}

async function resetOrganizerPassword(db) {
  // Hacher le nouveau mot de passe
  const hashedPassword = await hashPassword('org-password-2025');
  
  // Mettre √† jour le mot de passe
  db.run("UPDATE users SET password = ? WHERE username = 'organisateur'", [hashedPassword], (err) => {
    if (err) {
      console.error(`‚ùå Erreur lors de la r√©initialisation du mot de passe: ${err.message}`);
    } else {
      console.log('‚úÖ Mot de passe r√©initialis√© avec succ√®s');
    }
    
    db.close();
    process.exit(0);
  });
}

// Ex√©cuter le script
main();